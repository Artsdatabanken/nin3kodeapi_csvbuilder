#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

## Metode

#!csharp

using System.IO;
using System.Text.Json;
using System.Linq;
using System.Text.RegularExpressions;
        public string GetEndpointnameByLangkode(string langkode) {
            var endpointname = "unknown";
            ArrayList langkodeList = new ArrayList(langkode.Split('-'));
            var trinncount = langkodeList.Count;
            if (langkodeList[2] == "T")// langkode is from Type tree 
            {
                /*
                break;
                if (trinncount == 6) { endpointname = "kodeforType"; }
                else if (trinncount == 8) { endpointname = "kodeforHovedtypegruppe"; }
                else if (trinncount == 11) { endpointname = "kodeforGrunntype"; }
                else if (trinncount == 9 && Regex.IsMatch(langkodeList[8].ToString(), @"^[a-zA-Z]+$")) { endpointname = "kodeforHovedtypegruppe"; }
                else if (trinncount == 10 && langkodeList[8].ToString().StartsWith("M0")) { endpointname = "kodeforKartleggingsenhet"; }
                else if (trinncount == 9 && Regex.IsMatch(langkodeList[8].ToString(), @"^0|[1-9]\d*$")) { endpointname = "kodeforHovedtype"; }
                else if (trinncount == 10 && (langkodeList[6].ToString() == "MB" || langkodeList[6].ToString() == "VM")) { endpointname = "kodeforHovedtype"; }
                else if (trinncount == 10 && (langkodeList[4].ToString() == "LV" || langkodeList[4].ToString() == "PE")) { endpointname = "kodeforGrunntype"; }
                else if (trinncount == 10 && (langkodeList[4].ToString() != "LV" || langkodeList[4].ToString() != "PE")) { endpointname = "kodeforHovedtype"; }
                */
            }
            else {// langkode is from Variabel tree 
                if (trinncount == 5) { endpointname = "kodeforVariabel"; }
                else { _ = endpointname == "kodeForVariabelnavn"; }
            }
                return endpointname;
        }

#!csharp

var jsonString = File.ReadAllText("inn_data/type_alle_langkoder.json");

//All Langkode in "Type"-part of NINKodeAPIv3
var collection = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(jsonString);
var type_trinncount = new ArrayList();
foreach (var element in collection)
{    

    var estimatedType = GetEndpointnameByLangkode(element["Langkode"]);
    element.Add("EKlasse", estimatedType);
    var antTrinn = element["Langkode"].Split('-').Length;
    var summaryForElement = element["EKlasse"]+":"+element["Klasse"]+":"+antTrinn;
    type_trinncount.Add(summaryForElement);
}


var groupByResult = type_trinncount.Cast<string>()
    .GroupBy(x => x)
    .Select(g => new { Value = g.Key, Count = g.Count()})
    .ToList();
Console.WriteLine("Estimertklasse:Klasse:Antall trinn:Antall tilfeller");
foreach (var element in groupByResult)
{
    Console.WriteLine(element.Value+":"+element.Count);
}
